	Dropzone.options.myAwesomeDropzone = {
			
		    autoProcessQueue: false,

		    init: function (e) {

		        var myDropzone = this;

		        $('#btn_upload').on("click", function() {
		            myDropzone.processQueue(); // Tell Dropzone to process all queued files.
		        });

		        // Event to send your custom data to your server
		        myDropzone.on("sending", function(file, xhr, data) {

		            // First param is the variable name used server side
		            // Second param is the value, you can add what you what
		            // Here I added an input value
		            data.append("your_variable", $('#your_input').val());
		        });

		    }
		};
		=========================================================
				
				<c:set var="pre-fix" value="#" />
						<c:set var="cordinate" value="collapse" />
						
						<c:forEach var="name" items="${nameList}" varStatus="status">
	    					<div class="panel panel-default">
								<div class="panel-heading" role="tab" id="headingOne">
									<h4 class="panel-title">								
										<a role="button" data-toggle="collapse" data-parent="#accordion" href="${'#'}${cordinate}${status.count}" aria-expanded="true" aria-controls="collapseOne">
											ABCD
										</a>
									</h4>
								</div>
								
								<div id="${cordinate}${status.count}" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingOne">
									<div class="panel-body">
										<p>ABCD</p>
									</div>
								</div>
							</div>
						</c:forEach>
==================================================================================================================


$(document).ready(function(){
    $("#job_id").on("change", function(){
    	
    	var val = $(this).val();
    	
     	var pre = $("#aaa").attr("href");
    	
     	console.log(pre.toString()  + val.toString());     	 
     	$("#aaa").attr("href",pre.toString()  + val.toString());     	
        console.log($(this).val());
       
       
    });
});
	
	<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
		<property name="driverClassName" value="core.log.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:XE" />
		<property name="username" value="scott" />
		<property name="password" value="tiger" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/sqlmap/*.xml" />
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>	
	
	<!-- 	3번과 4번 방식을 사용하기 위한 방식임  -->
	<!-- 	Mapper Interface -->
	<mybatis-spring:scan base-package="edu.bit.ex.*"/> 
	
	=============================================================
	<bean id="student" class="edu.bit.ex.Student" >
		<property name="name" value="홍길동" />
		<property name="age" value="10" />
	</bean>
	
	<bean id="worker" class="edu.bit.ex.Worker" >
		<property name="name" value="홍길순" />
		<property name="age" value="35" />
		<property name="job" value="개발자" />
	</bean>
	
	<bean id="logAop" class="edu.bit.ex.LogAop" />
		
	<aop:config>
		<aop:aspect id="logger" ref="logAop">
			<aop:pointcut id="publicM" expression="within(edu.bit.ex.Student)"/>
			<aop:around pointcut-ref="publicM" method="loggerAop" />
		</aop:aspect>
	</aop:config>
		===============================================================================
		public Object loggerAop(ProceedingJoinPoint joinpoint) throws Throwable {
		String signatureStr = joinpoint.getSignature().toShortString();
		System.out.println( signatureStr + " is start.");
		
		long st = System.currentTimeMillis();
		
		try {
			Object obj = joinpoint.proceed();
			return obj;
		} finally {
		
			long et = System.currentTimeMillis();
			
			System.out.println( signatureStr + " is finished.");
			System.out.println( signatureStr + " 경과시간 : " + (et - st));
		}
		
	}
		==============================================================================
		<!-- Test Artifacts -->
		<dependency>
		    <groupId>org.springframework</groupId>
    		<artifactId>spring-test</artifactId>
    		<version>${org.springframework-version}</version>
		</dependency>
		
		<!-- AOP -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.7.4</version>
		</dependency>
		
		<dependency>
   			<groupId>cglib</groupId>
   			<artifactId>cglib</artifactId>
   			<version>2.2</version>
  		</dependency>
		
	========================================================================================
		// xml에 설정된 리소스참조
	//bean의 id가 uploadPath인 태그를 참조
	
	@Resource(name="uploadPath")
	String uploadPath;
	
	
	// url은 같지만 get방식으로 넘어옴
	@RequestMapping(value="/upload/uploadForm", method = RequestMethod.GET)
	public void uploadForm() {
		// upload/uploadForm.jsp로 포워딩
	}
	
	//업로드 버튼 => 임시디렉토리업로드 => 파일정보가 file에 저장 => 지정된 디렉토리에 저장
	@RequestMapping(value = "/upload/uploadForm", method = RequestMethod.POST)
	public ModelAndView uploadForm(MultipartFile file, ModelAndView mav) throws Exception{
		
		logger.info("파일이름:" + file.getOriginalFilename());
		String savedName = file.getOriginalFilename();
		
		logger.info("파일크기:" + file.getSize());
		logger.info("컨텐트타입:" + file.getContentType());
		
		savedName = uploadFile(savedName,file.getBytes());
		mav.setViewName("upload/uploadResult");
		mav.addObject("saveName",savedName);
		return mav; // uploadResult.jsp로 포워딩	
	}
	
	//파일이름이 중복되지 않도록 처리
	private String uploadFile(String originalName, byte[] fileData) throws Exception {
		
		//uuid 생성(Universal Unique IDentifier, 범용 고유 식별자 , 랜덤으로 코드를 만들어냄)
		UUID uid = UUID.randomUUID();
		String savedName = uid.toString() + "_" + originalName;
		File target = new File(uploadPath, savedName);
		
		//임시디렉토리에 저장된 업로드된 파일을 지정된 디렉 토리로 복사
		//FileCopyUtils.copy(바이트배열,파일객체)
		FileCopyUtils.copy(fileData, target);
		
		return savedName;
	}
	
	==========================================================================================
	<!-- MultipartResolver 설정 -->
    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="maxUploadSize" value="100000000" />
        <beans:property name="maxInMemorySize" value="100000000" />
    </beans:bean>
	
	<!-- 파일업로드를 위한 디렉토리 설정 -->
	
	<!-- String uploadPath = new String("e:/uplaod"); -->
	<beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg value="d:/upload"/>
	</beans:bean>
===========================================================================================
		<!-- MultipartHttpServletRequset -->
		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		    <version>2.4</version>
		</dependency>
		
		<!-- fileupload -->
		<dependency>
		    <groupId>commons-fileupload</groupId>
		    <artifactId>commons-fileupload</artifactId>
		    <version>1.2.2</version>
		</dependency>
		==================================
	<!-- 인터셉터 객체 생성 -->
	<beans:bean id="boardInterceptor" class="edu.bit.ex.interceptor.BoardInterceptor">
	</beans:bean>
	<!-- Interceptor 설정 -->
	<interceptors>
	    <interceptor>
	        <mapping path="/board/**"/>         
	       <!--  <exclude-mapping path="/resources/**"/> -->
	        <beans:ref bean="boardInterceptor"/>
	    </interceptor>
	</interceptors>
	
=====================================================================================
@Select("select * from login where id = #{id} and pw = #{pw}")
	public MemberVO logInMember(@Param("id") String id,@Param("pw") String pw);

-- 테이블 생성
create table login (
idx number(10) primary key,
id varchar2(20) not null,
pw varchar2(20) not null,
name varchar2(20) not null,
age number(4) not null,
email varchar2(50) not null
);

-- 시퀀스 생성
create SEQUENCE login_seq;

-- admin 1111 등록
insert into login values(login_seq.nextval, 'admin', '1111', 'admin', 30, 'admin@google.com');

commit;

-- 아이디 목록 확인
select * from login;
===========================================
		
		import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations= {"file:src/main/webapp/WEB-INF/spring/**/root-context.xml"})
		====================================================
		<dependency>
		    <groupId>org.springframework</groupId>
    		<artifactId>spring-test</artifactId>
    		<version>${org.springframework-version}</version>
		</dependency>
		=======================================================
	
	
	SELECT * FROM
	<![CDATA[
		SELECT * FROM
		(
	        SELECT
	            A.*,
	            ROWNUM AS RNUM,
	            COUNT(*) OVER() AS TOTCNT
	        FROM
	            (               
	             	select bId, bName, bTitle, bContent, bDate, bHit, bGroup, bStep, bIndent from mvc_board order by bGroup desc, bStep asc	
	            ) A
	    )WHERE RNUM >= #{startNum} AND RNUM <= #{endNum}
	]]>	
    ========================================================
     
     DECLARE
       v_cnt number := 100; 
	   BEGIN
	
       DBMS_OUTPUT.ENABLE; 
	
       WHILE v_cnt < 1000 LOOP 
	
            insert into mvc_board (bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent)
            VALUES (mvc_board_seq.nextval, 'abcd', 'is title', 'is content', 0 , mvc_board_seq.currval, 0, 0);
	
           v_cnt := v_cnt+1; 
	
           EXIT WHEN v_cnt > 1000; 
	
       END LOOP; 
	
       DBMS_OUTPUT.PUT_LINE('데이터 입력 완료'); 
       DBMS_OUTPUT.PUT_LINE(v_cnt-100 || '개의 데이터가 입력되었습니다'); 
		
    END; 
commit;
		////////////////////////////////////////////////////////////////////////////////
		<c:if test="${pageMaker.prev}">
			<a href="list2${pageMaker.makeQuery(pageMaker.startPage - 1) }">«</a>
		</c:if>

		<c:forEach begin="${pageMaker.startPage }" end="${pageMaker.endPage }" var="idx">
		<%-- 	<c:out value="${pageMaker.cri.page == idx?'':''}" /> --%>
			<a href="list2${pageMaker.makeQuery(idx)}">${idx}</a>
		</c:forEach>
		
		<c:if test="${pageMaker.next && pageMaker.endPage > 0}">
			<a href="list2${pageMaker.makeQuery(pageMaker.endPage +1) }"> » </a>
		</c:if> <br>
	
	
	
	public String makeQuery(int page) {
		UriComponents uriComponentsBuilder = UriComponentsBuilder.newInstance().queryParam("page", page) // page = 3
				.queryParam("perPageNum", cri.getPerPageNum()) // page=3&perPageNum=10
				.build(); // ?page=3&perPageNum=10
		return uriComponentsBuilder.toUriString(); // ?page=3&perPageNum=10의 값을 리턴
	}


<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
  		<property name="mapperInterface" value="com.bit.mapper.IBoardMapper" />
  		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<insert id="insertBoard" parameterType="edu.bit.ex.vo.BoardVO" >
    	insert into mvc_board (bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent) values (mvc_board_seq.nextval, #{bName}, #{bTitle}, #{bContent}, 0, mvc_board_seq.currval, 0, 0 )
	</insert>
	

1.컨트롤러(Controller) : 클라이언트에서 요청이 들어올 때, 
해당 요청을 수행할 비즈니스 로직을 제어하는 객체다. 

2.스프링에서는 컨트롤러에서 세부적으로 서비스 레이어(Service Layer)를 만들어 해당 
요청사항을 객체 지향적인 방식으로 좀 더 세분화하여 관리한다. 
3.서비스(Service) : 서비스 레이어(Service Layer)단에서 세분화된 비즈니스로직을 처리하는 객체 
4.DAO(Data Access Object) : DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 객체
5.VO(Value Object) : 각 계층간 데이터 교환을 위한 자바 객체를 의미한다. 이 객체는 데이터를 
각 레이어 간에 전달하는 목적을 가지고 있으며 객체의 속성과
getter, setter만 가지고 있다. DTO(Data Transfer Object)로 불릴 수도 있다.


update mvc_board set bName = #{1}, bTitle = #{2}, bContent = #{3} where bId = #{0}

select bId, bName, bTitle, bContent, bDate, bHit, bGroup, bStep, bIndent from mvc_board order by bGroup desc, bStep asc

INSERT INTO BOARD (MID, MWRITER, MCONTENT) VALUES (BOARD_SEQ.NEXTVAL, #{param1}, #{param2})

//model forward 관련 
http://blog.naver.com/PostView.nhn?blogId=hyss-jts&logNo=221164446212&categoryNo=13&parentCategoryNo=0


insert into board (mId, mWriter, mContent) values (board_seq.nextval, '홍길동','아하 홍길동이다.' );

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.javalec.spring_mybatis.dao.IDao">
		
	
</mapper>
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="scott" />
		<property name="password" value="tiger" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:com/javalec/spring_mybatis/dao/mapper/*.xml"></property>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>	
	
	<repositories>
		<repository>
	    	<id>oracle</id>
	    	<url>http://www.datanucleus.org/downloads/maven2/</url>
		</repository>
	</repositories>
  
  
  
  <!-- 컨넥션 풀을 위한 라이브러리 -->
		<dependency>
		    <groupId>commons-dbcp</groupId>
		    <artifactId>commons-dbcp</artifactId>
		    <version>1.4</version>
		</dependency>
	
		<!-- 오라클 JDBC 드라이버 -->
		<dependency>
		    <groupId>oracle</groupId>
		    <artifactId>ojdbc6</artifactId>
		    <version>11.2.0.3</version>
		</dependency>
	
	    <!-- my바티스 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.2.8</version>
		</dependency>
		
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.2.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.1.4.RELEASE</version>
		</dependency>

"insert into mvc_board (bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent) values (mvc_board_seq.nextval, ?, ?, ?, 0, mvc_board_seq.currval, 0, 0 )"

create table mvc_board(
bId NUMBER(4) PRIMARY KEY,
bName VARCHAR2(20),
bTitle VARCHAR2(100),
bContent VARCHAR2(300),
bDate DATE DEFAULT SYSDATE,
bHit NUMBER(4) DEFAULT 0,
bGroup NUMBER(4),
bStep NUMBER(4),
bIndent NUMBER(4)
);

create sequence mvc_board_seq;

insert into mvc_board (bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent)
VALUES (mvc_board_seq.nextval, 'abcd', 'is title', 'is content', 0 , mvc_board_seq.currval, 0, 0);
